name: 'Main'

on:
  push:
    tags: ['*']
    branches: ['*']
  pull_request:
    branches: ['*']
  schedule:
    - cron: '25 12 * * 3'
  workflow_dispatch:

permissions: {}

jobs:

  lint:
    name: 'Lint'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    env:
      NODE_VERSION: 'lts/*'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b'
      - name: 'Use Node.js ${{ env.NODE_VERSION }}'
        uses: 'actions/setup-node@2fddd8803e2f5c9604345a0b591c3020ee971a93'
        with:
          node-version: '${{ env.NODE_VERSION }}'
          cache: 'npm'
      - name: 'Install'
        run: 'npm ci'
      - name: 'Lint'
        run: 'npm run lint'

  test:
    name: 'Test on Node.js ${{ matrix.node_version }} and ${{ matrix.os }}'
    needs: ['lint']
    runs-on: '${{ matrix.os }}'
    permissions:
      contents: 'read'
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        node_version: ['14', '16', '18']
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b'
      - name: 'Use Node.js ${{ matrix.node_version }}'
        uses: 'actions/setup-node@2fddd8803e2f5c9604345a0b591c3020ee971a93'
        with:
          node-version: '${{ matrix.node_version }}'
          cache: 'npm'
      - name: 'Install'
        run: 'npm ci'
      - name: 'Test'
        run: 'npm run test'

  build:
    name: 'Build'
    needs: ['test']
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    env:
      NODE_VERSION: 'lts/*'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b'
      - name: 'Use Node.js ${{ env.NODE_VERSION }}'
        uses: 'actions/setup-node@2fddd8803e2f5c9604345a0b591c3020ee971a93'
        with:
          node-version: '${{ env.NODE_VERSION }}'
          cache: 'npm'
      - name: 'Install'
        run: 'npm ci'
      - name: 'Build'
        run: 'npm run build'
      - name: 'Upload artifacts'
        uses: 'actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8'
        with:
          name: 'dist'
          path: './dist/*.js'
          retention-days: 1

  build-push-docker:
    name: 'Build and push Docker images'
    needs: ['build']
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      packages: 'write'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b'
      - name: 'Set up QEMU'
        uses: 'docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6'
      - name: 'Login to GitHub Container Registry'
        if: "github.event_name != 'pull_request'"
        uses: 'docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b'
        with:
          registry: 'ghcr.io'
          username: '${{ github.actor }}'
          password: '${{ secrets.GITHUB_TOKEN }}'
      - name: 'Login to Docker Hub'
        if: "github.event_name != 'pull_request'"
        uses: 'docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b'
        with:
          registry: 'docker.io'
          username: '${{ secrets.DOCKERHUB_USERNAME }}'
          password: '${{ secrets.DOCKERHUB_TOKEN }}'
      - name: 'Extract metadata'
        id: 'meta'
        uses: 'docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a'
        with:
          images: |
            ghcr.io/${{ github.repository }}
            docker.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
      - name: 'Build and push'
        uses: 'docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94'
        with:
          context: './'
          platforms: 'linux/amd64,linux/arm64'
          tags: '${{ steps.meta.outputs.tags }}'
          labels: '${{ steps.meta.outputs.labels }}'
          push: "${{ github.event_name != 'pull_request' }}"

  publish-npm:
    name: 'Publish npm package'
    if: "startsWith(github.ref, 'refs/tags/v')"
    needs: ['build', 'build-push-docker']
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    env:
      NODE_VERSION: 'lts/*'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b'
      - name: 'Use Node.js ${{ env.NODE_VERSION }}'
        uses: 'actions/setup-node@2fddd8803e2f5c9604345a0b591c3020ee971a93'
        with:
          node-version: '${{ env.NODE_VERSION }}'
          registry-url: 'https://registry.npmjs.org'
      - name: 'Publish package'
        env:
          NODE_AUTH_TOKEN: '${{ secrets.NPM_TOKEN }}'
        run: |
          PKG_NAME="$(jq -r '.name' ./package.json)"; PKG_VERSION="$(jq -r '.version' ./package.json)"
          if [ "$(npm view "${PKG_NAME:?}" versions --json | jq -r --arg v "${PKG_VERSION:?}" 'index($v)')" = 'null' ]; then
            npm publish
          fi

  release-github:
    name: 'Create GitHub release'
    if: "startsWith(github.ref, 'refs/tags/v')"
    needs: ['build', 'build-push-docker']
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'write'
    steps:
      - name: 'Download artifacts'
        uses: 'actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741'
        with:
          name: 'dist'
      - name: 'Create release'
        env:
          GITHUB_PAT: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          RELEASE_STATUS="$(curl -fs --proto '=https' --tlsv1.3 --globoff \
            --url "https://api.github.com/repos/${GITHUB_REPOSITORY:?}/releases/tags/${GITHUB_REF_NAME:?}" \
            --header "Authorization: Bearer ${GITHUB_PAT:?}" \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Content-Type: application/json' \
            --write-out '%{http_code}' --output /dev/null ||:)"
          if [ "${RELEASE_STATUS:?}" = '200' ]; then exit 0; fi
          RELEASE_ID="$(curl -fsS --proto '=https' --tlsv1.3 --globoff \
            --url "https://api.github.com/repos/${GITHUB_REPOSITORY:?}/releases" \
            --header "Authorization: Bearer ${GITHUB_PAT:?}" \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Content-Type: application/json' \
            --data "$(jq -rn --arg tag "${GITHUB_REF_NAME:?}" '{"name": $tag, "tag_name": $tag, "generate_release_notes": true}')" | jq -r '.id')"
          if [ -z "${RELEASE_ID-}" ] || [ "${RELEASE_ID:?}" = 'null' ]; then exit 1; fi
          for asset in ./*; do
            [ -f "${asset:?}" ] || continue
            encodedAssetName="$(jq -rn --arg v "$(basename "${asset:?}")" '$v|@uri')"
            curl -fsS --proto '=https' --tlsv1.3 --globoff \
              --url "https://uploads.github.com/repos/${GITHUB_REPOSITORY:?}/releases/${RELEASE_ID:?}/assets?name=${encodedAssetName:?})" \
              --header "Authorization: Bearer ${GITHUB_PAT:?}" \
              --header 'Accept: application/vnd.github.v3+json' \
              --header 'Content-Type: application/octet-stream' \
              --data-binary "@${asset:?}" --output /dev/null
          done
